
@{
    /**/

    ViewBag.Title = "Lesson 4";
}

@section Scripts
{
    <style type="text/css">

        #word-section {
            border: 1px solid #999;
            background-color: #fff;
        }



        section {
            width: 90%;
            margin: 0 auto;
            padding: 0.5em;
        }

        #word-section {
            font-family: Arial;
            font-size: 1.5em;
            height: 4em;
            line-height: 2em;
            /* hide 3rd line of text */
            border-radius: 0.25em;
            position: relative;
            overflow: hidden;
        }

            #word-section > span {
                display: inline-block;
                margin-left: 1em;
                /* emulate spaces between words */
            }

        #type-section {
            text-align: center;
        }

            #type-section > * {
                font-size: 1.5em;
                display: inline-block;
                border-radius: 0.25em;
                border: none;
                color: #fff;
                vertical-align: middle;
            }

        #typebox {
            font-family: Arial;
            width: 64%;
            color: #000;
            padding: 0.5em;
            box-shadow: -1px -1px 5px #383838;
        }

            #typebox:focus {
                outline: none;
            }

        #timer {
            width: 4em;
            background-color: #467F21;
            margin-right: 0;
        }



        #results {
            font-family: sans-serif;
            text-align: center;
            margin: 0 1%;
            display: block;
        }

            #results li {
                list-style: none;
            }

                #results li:first-child {
                    font-size: 1.5em;
                }

                #results li:nth-child(2) {
                    font-size: 0.8em;
                    line-height: 1em;
                }

            #results #results-stats {
                font-size: 0.6em;
            }




        /* hides small bit of residule text after scrolling */
        .magic-box {
            position: fixed;
            width: inherit;
            height: 0.5em;
            top: 54px;
            background-color: #fff;
        }

        .waiting {
            text-align: center;
            line-height: 1.5em;
            font-size: 3em;
        }

        .current-word {
            background-color: #dddddd;
        }

        .correct-word-c {
            color: #93C572;
        }

        .incorrect-word-c {
            color: #e50000;
        }

        .incorrect-word-bg {
            background-color: #e50000;
        }
    </style>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

  



    <script type="text/javascript">

        //add the words on the page load event
        $(document).ready(function () {
            addWords();
          
        });

        

        // Word Count and other data.
        var wordData = {
            correct: 0,
            incorrect: 0,
            total: 0,
            typed: 0
        };
        //to create chart for WordsInfo
        function CreateChart() {



            var typedNetSpeed = (wordData.total - wordData.incorrect) / minutes;
            var resultAcuracy = (typedNetSpeed / speedGrossWPM) * 100;

            Chart.defaults.global.defaultFontColor = 'blue';
            var wordsInfo = document.getElementById('WordsInfo').getContext('2d');
            var chart = new Chart(wordsInfo, {
                // The type of chart we want to create
                type: 'bar',

                // The data for our dataset
                data: {
                    labels: ['Total Words', 'Correct Words', 'Incorrect Words'],
                    datasets: [{
                        label: 'Typing Results',
                        backgroundColor: 'rgb(255, 99, 132)',
                        borderColor: 'rgb(255, 99, 132)',
                        data: [wordData.total, wordData.correct, wordData.incorrect],
                        backgroundColor: ["purple", "green", "red"]
                    }]
                },

                // Configuration options go here
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }],
                        xAxes: [{
                            // Change here
                            barPercentage: 0.2
                        }]
                    }
                }
            });

            //to create chart for GrossWPM

           
            //Minutes taken in the test is stored in minutes variable, use here to utilize it

            
           
          

            var grossWPM = document.getElementById('GrossWPM').getContext('2d');
            var chart = new Chart(grossWPM, {
                // The type of chart we want to create
                type: 'bar',

                // The data for our dataset
                data: {
                    labels: ['Gross WPM'],
                    datasets: [{
                        label: 'Gross WPM',
                        backgroundColor: 'rgb(255, 99, 132)',
                        borderColor: 'rgb(255, 99, 132)',
                        data: [speedGrossWPM],
                        backgroundColor: ["chocolate"]
                    }]
                },

                // Configuration options go here
                options: {
                    scales: {
                        yAxes: [{
                            beginAtZero: true
                        }
                        ],
                        xAxes: [{
                            // Change here
                            barPercentage: 0.2
                        }]
                    }
                }
            });




            
         
         
            var accuracy = document.getElementById('Accuracy').getContext('2d');
            var chart = new Chart(accuracy, {
                // The type of chart we want to create
                type: 'bar',

                // The data for our dataset
                data: {
                    labels: ['Accuracy'],
                    datasets: [{
                        label: 'Accuracy(%)',
                        backgroundColor: 'rgb(255, 99, 132)',
                        borderColor: 'rgb(255, 99, 132)',
                        data: [resultAcuracy],
                        backgroundColor: ["FireBrick"]
                    }]
                },

                // Configuration options go here
                options: {
                    scales: {
                        yAxes: [{
                            beginAtZero: true
                           
                        }
                        ],
                        xAxes: [{
                            // Change here
                            barPercentage: 0.2
                        }]
                    }
                }
            });



            

            var netSpeed = document.getElementById('NetSpeed').getContext('2d');
            var chart = new Chart(netSpeed, {
                // The type of chart we want to create
                type: 'bar',

                // The data for our dataset
                data: {
                    labels: ['Net WPM'],
                    datasets: [{
                        label: 'Net WPM',
                        backgroundColor: 'rgb(255, 99, 132)',
                        borderColor: 'rgb(255, 99, 132)',
                        data: [typedNetSpeed],
                        backgroundColor: ["orange"]
                    }]
                },

                // Configuration options go here
                options: {
                    scales: {
                        yAxes: [{
                            min: 0,
                            max: 100,
                            callback: function (value) { return value + "%" }
                        }
                        ],
                        xAxes: [{
                            // Change here
                            barPercentage: 0.2
                        }]
                    }
                }
            });
           // document.getElementById('firstcharts').style.display = "block";

        }

        

        // jQuery like selection of elements.
        "use strict";

        window.$ = document.querySelectorAll.bind(document);

        // Changes for  Firefox
        if (navigator.userAgent.match(/firefox/i)) {
            // Unicode font sizes
            var ffBtn = "font-weight: normal; font-size: 2em; margin-left: 0.3em;";
            $("#restart-symbol")[0].setAttribute("style", ffBtn);

            var ffwait = "line-height: 1em; font-size: 4em;";
            $(".waiting")[0].setAttribute("style", ffwait);
        }

        /////////////////////////////////////////

        // Sorted list of the 500 most common English words.
        var wordList = ['ਚਟਪਟ', 'ਤਰਕ', 'ਚਤਰ', 'ਪਰਕੋ', 'ਪਰਤ', 'ਰਕਤ', 'ਚਰਚ', 'ਤਪ', 'ਤਕ', 'ਕਰ', 'ਪਰ', 'ਰਿਪੋਰਟ', 'ਰੋਚਕ', 'ਚੇਤ', 'ਰੁਤ', 'ਰੇਤ', 'ਰੋਕੋ', 'ਰੋਕ', 'ਕਰੋ', 'ਕਿ', 'ਕੇ', 'ਪਰਕ', 'ਚੇਤਕ', 'ਕਿਰਤ', 'ਰਿਕਤ', 'ਚਿਪਕ', 'ਚੋਕਰ', 'ਪਰਕ'];
       
        //////////////////////////////////////////

      //shuffle words 

        function shuffle(array) {
            var currentIndex = array.length, temporaryValue, randomIndex;

            // While there remain elements to shuffle...
            while (0 !== currentIndex) {

                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;

                // And swap it with the current element.
                temporaryValue = array[currentIndex];
                array[currentIndex] = array[randomIndex];
                array[randomIndex] = temporaryValue;
            }

            return array;
        }


        // Add words to word-section

        function addWords() {
            // clear existing word-section
           // console.log(wordList.length);
            var wordSection = $("#word-section")[0];
            wordSection.innerHTML = "";

            //start i ---1 less than the word of array length
            for (var i = 27; i > 0; i--) {
                var words = shuffle(wordList);
                var wordSpan = "<span>" + words[i] + "</span>";
                wordSection.innerHTML += wordSpan;
            }
            // mark first word as current-word
            wordSection.firstChild.classList.add("current-word");

            // mark last word with magic-box
            // let magicBox = document.createElement("DIV");
            // magicBox.classList.add("magic-box");
            // wordSection.appendChild(magicBox);

            
        }

        //////////////////////////////////////////

        // Word Colors
        var colorCurrentWord = " #dddddd";
        var colorCorrectWord = "#93C572";
        var colorIncorrectWord = "#e50000";

       

        //////////////////////////////////////////
        // Initial implementation notes:
        // next word on <space>, if empty, then set value=""
        // after <space> if value == current-word, mark as correct-word
        // else, mark as incorrect-word
        // if value.length != current-word[:value.length], mark as incorrect-word
        // else, mark as current-word
        //////////////////////////////////////////

        function checkWord(word) {
            var wlen = word.value.length;
            // how much we have of the current word.
            var current = $(".current-word")[0];
            var currentSubstring = current.innerHTML.substring(0, wlen);
            // check if we have any typing errors
            if (word.value.trim() != currentSubstring) {
                current.classList.add("incorrect-word-bg");
                return false;
            } else {
                current.classList.remove("incorrect-word-bg");
                return true;
            }
        }

        function submitWord(word) {
            // update current-word and
            // keep track of correct & incorrect words
            var current = $(".current-word")[0];

            console.log(current);
            if (checkWord(word)) {
                current.classList.remove("current-word");
                current.classList.add("correct-word-c");
                wordData.correct += 1;
            } else {
                current.classList.remove("current-word", "incorrect-word-bg");
                current.classList.add("incorrect-word-c");
                wordData.incorrect += 1;
            }
            // update wordData
            wordData.total = wordData.correct + wordData.incorrect;

            // make the next word the new current-word.
            current.nextSibling.classList.add("current-word");

           
        }

        function clearLine() {
            // remove past words once you get to the next line
            var wordSection = $("#word-section")[0];
            console.log(wordSection);
            var current = $(".current-word")[0]; // second line (first word)
            console.log(current);
            var previous = current.previousSibling; // first line (last word)
            console.log(previous);
            var children = $(".correct-word-c, .incorrect-word-c").length;
            console.log(children);


            //get the last span item of the word section--below line working to get the value
            var lastspanelement = wordSection.lastChild.innerHTML;
            console.log(lastspanelement);

            var remaining = $('#word-section > span').not('correct-word-c').length;
            console.log(remaining);

            //var lastchild = wordSection.lastChild;

            //if (wordSection.lastChild.classList.contains('.current-word')) {
            //    alert();
            //}
           

           
            // <span>'s on the next line have a greater offsetTop value
            // than those on the top line.
            // Remove words until the first word on the second line
            // is the fistChild of word-section.
            if (current.offsetTop > previous.offsetTop) {
                for (var i = 0; i < children; i++) {
                    wordSection.removeChild(wordSection.firstChild);
                }
            }

          

        }

     
           

        function typingTest(e) {
            // Char:        Key Code:
            // <space>      32
            // <backspace>  8
            // <shift>      16
            // [A-Z]        65-90
            // [' "]        222

           
          //  var classcheck = ele.hasClass('fakeclass');
            //start timer
            // markPresent();

            // Get key code of current key pressed.
            e = e || window.event;
            var kcode = e.keyCode;
            var word = $("#typebox")[0];




            //  check if empty (starts with space)
            if (isRunning == false) {
                word.value = "";
                //alert("Clock not running!")
                document.getElementById("errorMessage").innerText = "Please Click on Start!";
            }



            else {
                if (word.value.match(/^\s/g)) {
                    word.value = "";

                }


                else {

                    // checks for typing errors while you type
                    // <space> submits words
                    if (kcode == 32) {
                        checkWord(word);
                        submitWord(word); // keep track of correct / incorrect words
                        clearLine(); // get rid of old words
                        $("#typebox")[0].value = ""; // clear typebox after each word
                    }
                    wordData.typed += 1; // count each valid character typed

                    //testing to generate alert on last child of word section

                  
                   
                    //console.log(wordData.typed);
                    //console.log(wordData.correct);
                    //console.log(wordData.incorrect);
                }
            }

        }

        //to get the time spent on typing
        var time = null;


        /*Timer code*/


        var clock = null;//Define a global variable for the clock
        var isRunning = false;
        var initTime = null;


        function Clock() {

            //disable span error
            document.getElementById("errorMessage").innerText = "";

            //set autofocus to typing textbox
            document.getElementById("typebox").focus();

            //console.log("Called clock");
            if (clock != null) {
                //Clock is running
                //console.log("Stopping clock");
                clearInterval(clock);
                if (minutes < 1) {
                    clock = null;
                   // alert("hello");
                    alert('Please type at least for a minute to get good results!');
                    clock = setInterval(updateClock, 1000);
                    updateClock();
                }

                else {
                    document.getElementById("clock").innerText = "Start";

                    document.getElementById("test").innerText = "";
                    CreateChart();
                    //  showCharts();
                  //  $("#my-div").show();
                  
                  
                   // showDiv();
                    //console.log(clock);
                    //  alert("Total word typed;correct;incorrect" + wordData.total + ";" + wordData.correct + ";" + wordData.incorrect);
                    isRunning = false;
                }
              
            } else {
                //Clock is not running
                //console.log("Starting clock");
                setInitialTime();
                clock = setInterval(updateClock, 1000); // Starts calling updateClock, which should do what your need with the clock.
                document.getElementById("clock").innerText = "Stop"; //Changes the clock button text
                updateClock();
                
               // console.log(time);
                //alert(clock);
                // console.log(clock);
                isRunning = true;
            }
        }

        function setInitialTime() {
            initTime = new Date().getTime();
        }

        function updateClock() {
            //console.log("Clock update");
            let currTime = new Date().getTime(),
                diff = currTime - initTime;
            //console.log("Actual time is " + currTime);
            //console.log("Time inited was " + initTime);
            //console.log(format(diff / 1000));
            time = format(diff / 1000);
            hours = time.split(':')// split it at the colons
            minutes = (+hours[0]) * 60 + (+hours[1]);
          //  console.log(minutes);
            speedGrossWPM = wordData.total / minutes;
         //   console.log(speedGrossWPM);
            document.getElementById("test").innerText = time;
            //  alert(time);
        }

        function format(seconds) {
            var numhours = parseInt(Math.floor(((seconds % 31536000) % 86400) / 3600), 10);
            var numminutes = parseInt(Math.floor((((seconds % 31536000) % 86400) % 3600) / 60), 10);
            var numseconds = parseInt((((seconds % 31536000) % 86400) % 3600) % 60, 10);
            return ((numhours < 10) ? "0" + numhours : numhours) + ":" + ((numminutes < 10) ? "0" + numminutes : numminutes) + ":" + ((numseconds < 10) ? "0" + numseconds : numseconds);
        }
    </script>

    <style type="text/css">
        table, th, td {
            border-collapse: collapse;
            padding: 7px;
        }

        p {
            line-height: 1.2;
            font-size: larger;
            font-weight: bold;
        }

        cont-table {
            text-align: center;
            border-collapse: collapse;
            background: #fff;
            color: #936E25;
            font-size: 20px;
            margin: auto;
            margin-bottom: 50px;
            font-weight: bolder;
        }

        .cont-table td {
            padding: 15px;
        }

        .cont-table th {
            padding: 15px;
        }

        .cont-table tr:nth-child(even) {
            background: #DBF0CD;
        }

        .cont-table tr:nth-child(odd) {
            background: #E0FFFF;
        }

        .column {
            float: left;
            margin: 20px;
            background-color: grey;
            padding-bottom: 100%;
            margin-bottom: -100%;
        }

    </style>

}

    <div class="container">
        <div class="row">
            <div class="col-sm-3">
                <!--add area here -->
            </div>
            <div class="col-sm-6">
                <h3 style="text-align:center;"><span class="glyphicon glyphicon-road"></span>&nbsp;&nbsp;Learn Punjabi Raavi Font Typing&nbsp;&nbsp;</h3>
                <h4 style="text-align:center;"><span class="glyphicon glyphicon-chevron-left"></span>&nbsp;&nbsp;@Html.ActionLink("Back To Learn Typing", "LearnTyping", "StartTyping")&nbsp;&nbsp;</h4>
                <h4 style="text-align:center;">&nbsp;&nbsp;Home Row : Lesson 4&nbsp;&nbsp;</h4>
                <h4 style="text-align:center;">&nbsp;&nbsp;Learn Third Row:&nbsp;@Html.ActionLink("Lesson 1", "Lesson1", "ThirdRow")&nbsp;&nbsp;<span class="glyphicon glyphicon-chevron-right"></span></h4>
                <br />
                <img src="~/LearnTypingPhotos/HomeRow/HomeRowLesson1.jpg" style="width:550px;" />

                <br />
                <br />
                <table class="cont-table">
                    <tbody>
                        <tr>
                            <th>
                                Key Combinations
                            </th>
                            <td>
                                a
                            </td>
                            <td>
                                s
                            </td>
                            <td>
                                d
                            </td>
                            <td>
                                f
                            </td>
                            <td>
                                g
                            </td>
                            <td>
                                h
                            </td>
                            <td>
                                j
                            </td>
                            <td>
                                k
                            </td>
                            <td>
                                l
                            </td>
                            <td>
                                ;
                            </td>
                            <td>
                                '
                            </td>
                        </tr>
                        <tr>
                            <th>
                                Raavi
                            </th>
                            <td>
                                ੋ
                            </td>
                            <td>
                                ੇ
                            </td>
                            <td>
                                ੍
                            </td>
                            <td>
                                ਿ
                            </td>
                            <td>
                                ੁ
                            </td>
                            <td>
                                ਪ
                            </td>
                            <td>
                                ਰ
                            </td>
                            <td>
                                ਕ
                            </td>
                            <td>
                                ਤ
                            </td>
                            <td>
                                ਚ
                            </td>
                            <td>
                                ਟ
                            </td>
                        </tr>
                    </tbody>
                </table>

                <br />


               @* <section id="word-section"><span class="current-word">ਚਟਪਟ</span><span>ਤਰਕ</span><span>ਚਤਰ </span><span>ਪਰਕੋ</span><span>ਪਰਤ</span><span>ਰਕਤ</span><span>ਚਰਚ</span><span>ਤਪ </span><span>ਤਕ</span><span>ਕਰ </span><span>ਪਰ </span><span>ਰਿਪੋਰਟ</span><span>ਰੋਚਕ</span><span>ਚੇਤ </span><span>ਰੁਤ</span><span>ਰੇਤ</span><span>ਰੋਕੋ</span><span>ਰੋਕ</span><span>ਕਰੋ </span><span>ਕਿ</span><span>ਕੇ </span><span>ਪਰਕ</span><span>ਚੇਤਕ</span><span>ਕਿਰਤ</span><span>ਰਿਕਤ</span><span>ਚਿਪਕ </span><span>ਚੋਕਰ</span><span>ਪਰਕ</span></section>*@
                <section id="word-section"></section>
                    <br />
                    <div id="errorDiv" style="text-align:center;"> <span id="errorMessage" style="text-align:center;color:red;font-weight:bold"></span></div>

                    <section id="type-section">
                        <input id="typebox" name="typebox" type="text" autofocus="" tabindex="1" onkeyup="typingTest(event)">

                    </section>


                    <div id="divtimer" style="text-align:center">
                        <p id="test"></p>
                        <button type="button" class="btn btn-success" id="clock" onclick="Clock();">Start</button>
                    </div>


                    <br />
                    <div id="banner" style="text-align:center;">
                        <p>Click on Start Button to Start Typing</p>
                        @*<marquee style="font-weight:bold;color:cadetblue">If you see typed characters in English, Please Navigate to Set Up Raavi Font tab</marquee>*@
                    </div>
                    <div id="banner" style="text-align:center;">
                        <p><b><u>Note:</u></b>If you see typed characters in English, Please Navigate to Set Up Raavi Font tab</p>
                        @*<marquee style="font-weight:bold;color:cadetblue">If you see typed characters in English, Please Navigate to Set Up Raavi Font tab</marquee>*@
                    </div>


                    <div class="col-sm-3">
                        <!--add area here -->


                    </div>
</div>
        </div>

       

    </div>
       
    <div id="my-div" class="hide">
        <div class="row form-group">


            <div class="col-md-6">
                <div class="col-md-12" style="height:300px;">
                    <canvas id="WordsInfo"></canvas>
                </div>
            </div>
            <div class="col-md-6">
                <div class="col-md-12" style="height:300px;">
                    <canvas id="Accuracy"></canvas>
                </div>
            </div>

        </div>

        <div class="row form-group">


            <div class="col-md-6">
                <div class="col-md-12" style="height:300px;">
                    <canvas id="GrossWPM"></canvas>
                </div>
            </div>
            <div class="col-md-6">
                <div class="col-md-12" style="height:300px;">
                    <canvas id="NetSpeed"></canvas>
                </div>
            </div>

        </div>
    </div>

